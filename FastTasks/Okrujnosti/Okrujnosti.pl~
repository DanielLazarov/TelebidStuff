use warnings;
use strict;

use GD::Simple;
# create a new image (width, height)
my $img = GD::Simple->new(500, 500);
$img->bgcolor(undef);
$img->fgcolor('green');
$img->rectangle(20, 40, 100, 60);

chomp(my $n = <STDIN>);
my @circles;
my @graph;
my $mincount = $n;
for (my $var = 0; $var < $n; $var++) 
{
	for (my $var1 = 0; $var1 < $n; $var1++) 
	{
		    $graph[$var][$var1] = 0;
	}
}
#Getting all circles input and populates the graph matrix
for(my $i = 0; $i < $n; $i++) 
{
	INPUT
	chomp(my $input = <STDIN>);
	my @splited = split(/ /,$input);
	my $x = $splited[0];
	my $y = $splited[1];
	my $r = $splited[2];

	#TODO Draw the Circle
	for (my $var = 0; $var < $i; $var++) 
	{
		if($x!=$circles[$var][0] || $y!=$circles[$var][1])
		{
			my $d = sqrt(($x-$circles[$var][0])**2 + ($y-$circles[$var][1])**2);
			if($d< $r + $circles[$var][2]) 
			{
				if($d < $r || $d < $circles[$var][2]) 
				{
					if($r < $circles[$var][2]) 
					{# $r is smaller
						if($d+$r > $circles[$var][2])
						{
							#TODO Draw the line
							$graph[$i][$var] = 1;
							$graph[$var][$i] = 1;
						}
					}
					else 
					{
						if($d + $circles[$var][2] > $r)
						{# $circles[$var][2] is smaller or equal
							#TODO Draw the line
							$graph[$i][$var] = 1;
							$graph[$var][$i] = 1;
						}
					}

				}
				else 
				{
					#TODO Draw the line
					$graph[$i][$var] = 1;
					$graph[$var][$i] = 1;
				}
			}
		}
	}
	$circles[$i][0] = $x;
	$circles[$i][1] = $y;
	$circles[$i][2] = $r;
}

searchPath(0,0);
if($mincount < $n) 
{
	print "$mincount \n";
}
else 
{
	print "-1\n";
}
sub searchPath 
{
	my($i,$count) = @_;
	for(my $j = $i; $j < $n; $j++) 
	{
		if($graph[$i][$j]) 
		{
			if($j == $n-1) 
			{
				$count++;
				if($count < $mincount)
			 	{
					$mincount = $count;
				}
			}
			else
		 	{
				searchPath($j,$count + 1);
			}	
		}
	}
}

#print current graph
for (my $var = 0; $var < $n; $var++) 
{
	for (my $var1 = 0; $var1 < $n; $var1++) 
	{
		print $graph[$var][$var1];
	}
	print "\n";
}

