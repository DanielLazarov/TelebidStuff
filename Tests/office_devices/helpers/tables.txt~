CREATE TABLE users (
id SERIAL PRIMARY KEY,
username TEXT UNIQUE NOT NULL,
password TEXT NOT NULL,
email TEXT UNIQUE NOT NULL,
fb_id TEXT UNIQUE,
fb_first_name TEXT,
fb_last_name TEXT,
fb_email TEXT UNIQUE,
activated BOOLEAN NOT NULL DEFAULT 'f',
access_level INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE sessions(
id SERIAL PRIMARY KEY,
user_id INTEGER NOT NULL REFERENCES users(id),
session_id TEXT NOT NULL,
started TIMESTAMP NOT NULL DEFAULT now(),
expires TIMESTAMP NOT NULL DEFAULT now() + '30 minutes'
);





CREATE TABLE types (
id SERIAL PRIMARY KEY,
type TEXT UNIQUE NOT NULL,
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
last_modified_by TEXT
);

CREATE TABLE models (
id SERIAL PRIMARY KEY,
model TEXT UNIQUE,
type_id INTEGER REFERENCES types(id),
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
last_modified_by TEXT
);

CREATE TABLE networks(
id SERIAL PRIMARY KEY,
network_name_en text UNIQUE NOT NULL,
network_name_bg text UNIQUE NOT NULL,
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
hits INTEGER DEFAULT 0,
last_modified_by TEXT
);

CREATE TABLE network_devices (
id SERIAL PRIMARY KEY,
serial_num TEXT UNIQUE NOT NULL,
warranty DATE DEFAULT NULL,
network_id integer REFERENCES networks(id),
model_id integer REFERENCES models(id),
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
last_modified_by TEXT,
manual_url TEXT DEFAULT NULL,
has_image_files BOOLEAN DEFAULT 'f',
has_manual_files BOOLEAN DEFAULT 'f'
);

CREATE TABLE computers (
id SERIAL PRIMARY KEY,
serial_num TEXT UNIQUE NOT NULL,
computer_name_en TEXT DEFAULT NULL,
computer_name_bg TEXT DEFAULT NULL,
network_id integer REFERENCES networks(id),
manual_url TEXT DEFAULT NULL,
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
last_modified_by TEXT,
has_image_files BOOLEAN DEFAULT 'f',
has_manual_files BOOLEAN DEFAULT 'f',
exists BOOLEAN DEFAULT 't'
);


CREATE TABLE hardware_parts (
id SERIAL PRIMARY KEY,
serial_num TEXT UNIQUE NOT NULL,
warranty date DEFAULT NULL,
computer_id integer REFERENCES computers(id),
model_id integer REFERENCES models(id), 
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
last_modified_by TEXT,
manual_url TEXT DEFAULT NULL,
has_image_files BOOLEAN DEFAULT 'f',
has_manual_files BOOLEAN DEFAULT 'f'
);

CREATE TABLE images (
id SERIAL PRIMARY KEY,
file_name TEXT NOT NULL,
foreign_table TEXT NOT NULL,
foreign_id INTEGER NOT NULL,
CONSTRAINT computer_images_u_constraint UNIQUE (foreign_id, file_name),
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
last_modified_by TEXT NOT NULL
);

CREATE TABLE manuals (
id SERIAL PRIMARY KEY,
file_name TEXT NOT NULL,
foreign_table TEXT NOT NULL,
computer_id INTEGER NOT NULL,
CONSTRAINT computer_manuals_u_constraint UNIQUE (foreign_id, file_name),
date_inserted TIMESTAMP DEFAULT now(),
date_updated TIMESTAMP DEFAULT now(),
last_modified_by TEXT NOT NULL
);

CREATE TABLE meta_data_inputs (
id SERIAL PRIMARY KEY,
table_name TEXT NOT NULL,
column_name TEXT NOT NULL,
name TEXT NOT NULL,
input_type TEXT NOT NULL DEFAULT '',
required BOOLEAN NOT NULL default 'f',
ordering INTEGER NOT NULL DEFAULT 0,
label_en TEXT NOT NULL DEFAULT '',
label_bg TEXT NOT NULL DEFAULT '', 
default_value_en TEXT NULL DEFAULT '',
default_value_bg TEXT NULL DEFAULT '',
is_input BOOLEAN NOT NULL DEFAULT 'f',
is_foreign BOOLEAN NOT NULL DEFAULT 'f',
foreign_key_column TEXT NOT NULL DEFAULT '',
foreign_value_column TEXT NOT NULL DEFAULT '',
is_multilang BOOLEAN NOT NULL DEFAULT 'f'
);




DO
$do$
BEGIN
FOR i IN 1..1000000 LOOP
   INSERT INTO computers (serial_num, 
computer_name_en, 
computer_name_bg,
network_id
) 
values (concat('PC',cast(i as varchar)),
concat('Computer',cast(i as varchar)),
concat('Компютър',cast(i as varchar)),
(i%321233)+50
 );
END LOOP;
END
$do$;




DO
$do$
BEGIN
FOR i IN 1..1000000 LOOP
   INSERT INTO networks ( 
network_name_en, 
network_name_bg
) 
values (
concat('Network',cast(i as varchar)),
concat('Мрежа',cast(i as varchar))
);
END LOOP;
END
$do$;





SELECT partman.partition_data_time('master');












DO
$do$
BEGIN
FOR i IN 1..2000000 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + i);
END LOOP;
END
$do$;



CREATE OR REPLACE FUNCTION on_actionlog_update() RETURNS TRIGGER AS $$
BEGIN
        INSERT INTO action_log_passed VALUES (NEW.*);
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION on_actionlog_update() RETURNS TRIGGER AS $$
BEGIN
    IF ( NEW.active = 'f' ) THEN
        INSERT INTO action_log_passed VALUES (NEW.*);
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER action_log_update
    AFTER UPDATE OF active ON action_log
    FOR EACH ROW EXECUTE PROCEDURE on_actionlog_update();


CREATE TABLE action_log (
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    country_code char(2),
    content text,
    active boolean default 't'
);






















CREATE DATABASE shard_test;
CREATE SCHEMA partman;
CREATE EXTENSION pg_partman SCHEMA partman;
\c shard_test

CREATE TABLE master(
id SERIAL PRIMARY KEY,
somedata TEXT,
activation_date TIMESTAMP NOT NULL DEFAULT now(),
is_active BOOLEAN NOT NULL DEFAULT 't',
master_foreign_id INTEGER references master_foreign
);

DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now());
END LOOP;
END
$do$;
DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + '15 minutes');
END LOOP;
END
$do$;
DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + '30 minutes');
END LOOP;
END
$do$;
DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + '45 minutes');
END LOOP;
END
$do$;
DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + '60 minutes');
END LOOP;
END
$do$;
DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + '75 minutes');
END LOOP;
END
$do$;
DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + '90 minutes');
END LOOP;
END
$do$;
DO
$do$
BEGIN
FOR i IN 1..100 LOOP
   INSERT INTO master ( 
somedata, date
) 
values (
'somedat', now() + '105 minutes');
END LOOP;
END
$do$;

DO
$do$
BEGIN
FOR i IN 1..1000000 LOOP
   INSERT INTO master ( 
somedata, activation_date, foreign_master_id
) 
values (
'somedat', now() , i%7 + 1);
END LOOP;
END
$do$;


######



SELECT partman.create_parent('<schema_name>.<table_name>' , '<column_name>', 'time-dynamic', 'quarter-hour', null, 1);

DROP TRIGGER <table_name>_part_trig ON <table_name>;

SELECT partman.partition_data_time('<schema_name>.<table_name>', <number_of_intervals_to_shard>);


###
















