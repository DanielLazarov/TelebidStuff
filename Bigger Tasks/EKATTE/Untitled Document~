use Spreadsheet::ParseExcel;
use warnings;
use strict;
use DBI;


sub tsbFill {

	my $FileName = "Ekatte/Ekatte_xls/Ek_tsb.xls";
    my $parser   = Spreadsheet::ParseExcel->new();
    my $workbook = $parser->parse($FileName);

    die $parser->error(), ".\n" if ( !defined $workbook );

    # Following block is used to Iterate through all worksheets
    # in the workbook and print the worksheet content 
	my $conn = DBI->connect("DBI:Pg:dbname=ekatte;host=localhost", 'pg_user', '564564');
    for my $worksheet ( $workbook->worksheets() ) {

        # Find out the worksheet ranges
        my ( $row_min, $row_max ) = $worksheet->row_range();
        my ( $col_min, $col_max ) = $worksheet->col_range();

        for my $row ( $row_min + 1 .. $row_max ) {
			my @data=();
            for my $col ( $col_min .. $col_max ) {

                # Return the cell object at $row and $col
                my $cell = $worksheet->get_cell( $row, $col );
                next unless $cell;
				push(@data, $cell->value());

                #print "Row, Col    = ($row, $col)\n";
                #print "Value       = ", $cell->value(),       "\n";
            }
			my $cmd = "INSERT INTO ek_tsb(tsb,name) VALUES(?,?)";
			my $sth = $conn->do($cmd,undef,$data[0],$data[1]) || DBI::errst();
        }
    }
	$conn->disconnect();
	print "done!";
}

sub documentFill {

	my $FileName = "Ekatte/Ekatte_xls/Ek_doc.xls";
    my $parser   = Spreadsheet::ParseExcel->new();
    my $workbook = $parser->parse($FileName);

    die $parser->error(), ".\n" if ( !defined $workbook );

    # Following block is used to Iterate through all worksheets
    # in the workbook and print the worksheet content 
	my $conn = DBI->connect("DBI:Pg:dbname=ekatte;host=localhost", 'pg_user', '564564');
    for my $worksheet ( $workbook->worksheets() ) {

        # Find out the worksheet ranges
        my ( $row_min, $row_max ) = $worksheet->row_range();
        my ( $col_min, $col_max ) = $worksheet->col_range();

        for my $row ( $row_min + 1 .. $row_max ) {
			my @data=();
            for my $col ( $col_min .. $col_max ) {

                # Return the cell object at $row and $col
                my $cell = $worksheet->get_cell( $row, $col );
                next unless $cell;
				push(@data, $cell->value());

                #print "Row, Col    = ($row, $col)\n";
                #print "Value       = ", $cell->value(),       "\n";
            }
			my $cmd = "INSERT INTO ek_document(document,document_kind,document_name,document_inst,document_num,document_date,document_act,dv_data,dv_date) VALUES(?,?,?,?,?,?,?,?,?)";
			#character error in Ek_doc
			my $sth = $conn->do($cmd,undef,$data[0],$data[1],$data[2],$data[3],$data[4],$data[5],$data[6],$data[7],$data[8]) || DBI::errst();
        }
    }
	$conn->disconnect();
	print "done!";
}

sub municipalityFill {

	my $FileName = "Ekatte/Ekatte_xls/Ek_tsb.xls";
    my $parser   = Spreadsheet::ParseExcel->new();
    my $workbook = $parser->parse($FileName);

    die $parser->error(), ".\n" if ( !defined $workbook );

    # Following block is used to Iterate through all worksheets
    # in the workbook and print the worksheet content 
	my $conn = DBI->connect("DBI:Pg:dbname=ekatte;host=localhost", 'pg_user', '564564');
    for my $worksheet ( $workbook->worksheets() ) {

        # Find out the worksheet ranges
        my ( $row_min, $row_max ) = $worksheet->row_range();
        my ( $col_min, $col_max ) = $worksheet->col_range();

        for my $row ( $row_min + 1 .. $row_max ) {
			my @data=();
            for my $col ( $col_min .. $col_max ) {

                # Return the cell object at $row and $col
                my $cell = $worksheet->get_cell( $row, $col );
                next unless $cell;
				push(@data, $cell->value());

                #print "Row, Col    = ($row, $col)\n";
                #print "Value       = ", $cell->value(),       "\n";
            }
			my $cmd = "INSERT INTO ek_municipality(municipality,ekatte,name,category,document) VALUES(?,?,?,?,?)";
			my $sth = $conn->do($cmd,undef,$data[0],$data[1],$data[2],$data[3],$data[4]) || DBI::errst();
        }
    }
	$conn->disconnect();
	print "done!";
}

##################################
#-------------TABLES-------------#
##################################

	#---can be first---#
#CREATE TABLE ek_tsb(
#id SERIAL PRIMARY KEY,
#tsb CHAR(2) NOT NULL UNIQUE,
#name VARCHAR(50)NOT NULL
#);

	#---can be first---#
#CREATE TABLE ek_document (
#id SERIAL PRIMARY KEY,
#document INTEGER NOT NULL UNIQUE,
#document_kind VARCHAR(50) NOT NULL,
#document_name TEXT NOT NULL,
#document_inst TEXT NOT NULL,
#document_num VARCHAR(50) NOT NULL,
#document_date DATE NOT NULL,
#document_act DATE,
#dv_data VARCHAR(50),
#dv_date DATE
#);

	#---after ek_document---#
#CREATE TABLE ek_municipality(
#id SERIAL PRIMARY KEY,
#municipality CHAR(5) NOT NULL UNIQUE,
#ekatte CHAR(5) UNIQUE NOT NULL,
#name VARCHAR(50)NOT NULL,
#category INTEGER NOT NULL,
#document INTEGER NOT NULL REFERENCES ek_document(document)
#);

	#---after ek_document---#
#CREATE TABLE ek_town_hall (
#id SERIAL PRIMARY KEY,
#town_hall CHAR(8) NOT NULL UNIQUE,
#ekatte CHAR(5) UNIQUE NOT NULL,
#name VARCHAR(50)NOT NULL,
#category INTEGER,
#document INTEGER NOT NULL REFERENCES ek_document(document)
#);

	#---after ek_document---#
#CREATE TABLE ek_sobr(
#id SERIAL PRIMARY KEY,
#ekatte CHAR(5) UNIQUE NOT NULL,
#kind INTEGER NOT NULL,
#name VARCHAR(50)NOT NULL,
#area1 VARCHAR(50),
#area2 VARCHAR(50),
#document INTEGER NOT NULL REFERENCES ek_document(document)
#);

	#---after ek_document---#
#CREATE TABLE ek_raion(
#id SERIAL PRIMARY KEY,
#raion CHAR(8) NOT NULL UNIQUE,
#name VARCHAR(50) NOT NULL,
#category INTEGER,
#document INTEGER NOT NULL REFERENCES ek_document(document)
#);

	#---after ek_document---#
#CREATE TABLE ek_region(
#id SERIAL PRIMARY KEY,
#region CHAR(4) NOT NULL UNIQUE,
#name VARCHAR(50) NOT NULL,
#document INTEGER NOT NULL REFERENCES ek_document(document)
#);

	#---after ek_document and ek_raion---#
#CREATE TABLE sof_rai(
#id SERIAL PRIMARY KEY,
#ekatte CHAR(5) UNIQUE NOT NULL,
#t_v_m VARCHAR(25),
#name VARCHAR(50) NOT NULL,
#raion CHAR(8) NOT NULL REFERENCES ek_raion(raion),
#kind INTEGER NOT NULL,
#document INTEGER NOT NULL REFERENCES ek_document(document)
#);

	#---after ek_region and ek_document---#
#CREATE TABLE ek_area(
#id SERIAL PRIMARY KEY,
#area CHAR(3) NOT NULL UNIQUE,
#ekatte CHAR(5) NOT NULL UNIQUE,
#name VARCHAR(50)NOT NULL,
#region CHAR(4) NOT NULL REFERENCES ek_region(region),
#document INTEGER NOT NULL REFERENCES ek_document(document)
#);

	#---last---#
#CREATE TABLE ek_atte(
#id SERIAL PRIMARY KEY,
#ekatte CHAR(5) UNIQUE NOT NULL,
#t_v_m VARCHAR(25),
#name VARCHAR(50)NOT NULL,
#area CHAR(3) NOT NULL REFERENCES ek_area(area),
#municipality CHAR(5) NOT NULL REFERENCES ek_municipality(municipality),
#town_hall CHAR(8) NOT NULL REFERENCES ek_town_hall(town_hall),
#kind INTEGER NOT NULL,
#category INTEGER NOT NULL,
#altitude INTEGER NOT NULL,
#document INTEGER NOT NULL REFERENCES ek_document(document),
#tsb CHAR(2) NOT NULL REFERENCES ek_tsb(tsb)
#);

	























